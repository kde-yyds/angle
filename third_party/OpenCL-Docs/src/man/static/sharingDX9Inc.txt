General information about sharing memory objects with DX9 follows.

The goal of this extension is to allow applications to use media surfaces as
OpenCL memory objects. This allows efficient sharing of data between OpenCL
and selected adapter APIs (only DX9 for now). If this extension is
supported, an OpenCL image object can be created from a media surface and
the OpenCL API can be used to execute kernels that read and/or write memory
objects that are media surfaces. Note that OpenCL memory objects may be
created from the adapter media surface if and only if the OpenCL context has
been created from that adapter.

If this extension is supported by an implementation, the string
"cl_khr_dx9_media_sharing" will be present in the `CL_PLATFORM_EXTENSIONS`
(see flink:clGetPlatformInfo) or `CL_DEVICE_EXTENSIONS` (see
flink:clGetDeviceInfo).

As currently proposed the interfaces for this extension would be provided in
`cl_dx9_media_sharing.h`.

.Surface formats for Media Surface Sharing

This section includes the D3D surface formats that are supported when the
adapter type is one of the Direct 3D lineage. Using a D3D surface format not
listed here is an error. To extend the use of this extension to support
media adapters beyond DirectX9 tables similar to the ones in this section
will need to be defined for the surface formats supported by the new media
adapter. All implementations that support this extension are required to
support the NV12 surface format, the other surface formats supported are the
same surface formats that the adapter you are sharing with supports as long
as they are listed in the tables below (Tables 9.10.3 and 9.10.4).

[cols="1a,1a", options="header"]
|====
| FOUR CC code                        | CL image format (channel order, channel data type)
| FOURCC('N', 'V', '1', '2'), Plane 0 | `CL_R, CL_UNORM_INT8`
| FOURCC('N', 'V', '1', '2'), Plane 1 | `CL_RG, CL_UNORM_INT8`
| FOURCC('Y', 'V', '1', '2'), Plane 0 | `CL_R, CL_UNORM_INT8`
| FOURCC('Y', 'V', '1', '2'), Plane 1 | `CL_R, CL_UNORM_INT8`
| FOURCC('Y', 'V', '1', '2'), Plane 2 | `CL_R, CL_UNORM_INT8`
|====

In the table above, NV12 Plane 0 corresponds to the luminance (Y) channel
and Plane 1 corresponds to the UV channels. The YV12 Plane 0 corresponds to
the Y channel, Plane 1 to the U channel and Plane 2 to the V channel. Note
that the YUV formats map to `CL_R` and `CL_RG` but do not perform any YUV to
RGB conversion and vice-versa.

[cols="1a,1a", options="header"]
|====
| D3D format           | CL image format (channel order, channel data type)
| D3DFMT_R32F          | `CL_R, CL_FLOAT`
| D3DFMT_R16F          | `CL_R, CL_HALF_FLOAT`
| D3DFMT_L16           | `CL_R, CL_UNORM_INT16`
| D3DFMT_A8            | `CL_A, CL_UNORM_INT8`
| D3DFMT_L8            | `CL_R, CL_UNORM_INT8`
| D3DFMT_G32R32F       | `CL_RG, CL_FLOAT`
| D3DFMT_G16R16F       | `CL_RG, CL_HALF_FLOAT`
| D3DFMT_G16R16        | `CL_RG, CL_UNORM_INT16`
| D3DFMT_A8L8          | `CL_RG, CL_UNORM_INT8`
| D3DFMT_A32B32G32R32F | `CL_RGBA, CL_FLOAT`
| D3DFMT_A16B16G16R16F | `CL_RGBA, CL_HALF_FLOAT`
| D3DFMT_A16B16G16R16  | `CL_RGBA, CL_UNORM_INT16`
| D3DFMT_A8B8G8R8      | `CL_RGBA, CL_UNORM_INT8`
| D3DFMT_X8B8G8R8      | `CL_RGBA, CL_UNORM_INT8`
| D3DFMT_A8R8G8B8      | `CL_BGRA, CL_UNORM_INT8`
| D3DFMT_X8R8G8B8      | `CL_BGRA, CL_UNORM_INT8`
|====

Note that D3D9 format names seem to imply that the order of the color
channels are switched relative to OpenCL but this is not the case. For
example, layout of channels for each pixel for `D3DFMT_A32FB32FG32FR32F` is
the same as `CL_RGBA`, `CL_FLOAT`.

Properties of media surface objects may be queried using
flink:clGetMemObjectInfo and flink:clGetImageInfo with _param_name_
`CL_MEM_DX9_MEDIA_ADAPTER_TYPE_KHR`, `CL_MEM_DX9_MEDIA_SURFACE_INFO_KHR` and
`CL_IMAGE_DX9_MEDIA_SURFACE_PLANE_KHR`.
