.Sharing Memory Objects with Direct3D 11 Resources

The goal of this extension is to provide interoperability between OpenCL and
Direct3D 11. This is designed to function analogously to the
reflink:cl_khr_gl_sharing as defined in sections 9.7 and 9.8. If this
extension is supported by an implementation, the string
"cl_khr_d3d11_sharing" will be present in the `CL_PLATFORM_EXTENSIONS` or
`CL_DEVICE_EXTENSIONS` string described in the table of allowed values for
_param_name_ for flink:clGetDeviceInfo or flink:clGetPlatformInfo.

As currently proposed the interfaces for this extension would be provided in
`cl_d3d11.h`.

This section discusses OpenCL functions that allow applications to use
Direct3D 11 resources as OpenCL memory objects. This allows efficient
sharing of data between OpenCL and Direct3D 11. The OpenCL API may be used
to execute kernels that read and/or write memory objects that are also
Direct3D 11 resources. An OpenCL image object may be created from a Direct3D
11 texture resource. An OpenCL buffer object may be created from a Direct3D
11 buffer resource. OpenCL memory objects may be created from Direct3D 11
objects if and only if the OpenCL context has been created from a Direct3D
11 device.

.Lifetime of Shared Objects

An OpenCL memory object created from a Direct3D 11 resource remains valid as
long as the corresponding Direct3D 11 resource has not been deleted. If the
Direct3D 11 resource is deleted through the Direct3D 11 API, subsequent use
of the OpenCL memory object will result in undefined behavior, including but
not limited to possible OpenCL errors, data corruption, and program
termination.

The successful creation of a `cl_context` against a Direct3D 11 device
specified via the context create parameter `CL_CONTEXT_D3D11_DEVICE_KHR`
will increment the internal Direct3D reference count on the specified
Direct3D 11 device. The internal Direct3D reference count on that Direct3D
11 device will be decremented when the OpenCL reference count on the
returned OpenCL context drops to zero.

The OpenCL context and corresponding command-queues are dependent on the
existence of the Direct3D 11 device from which the OpenCL context was
created. If the Direct3D 11 device is deleted through the Direct3D 11 API,
subsequent use of the OpenCL context will result in undefined behavior,
including but not limited to possible OpenCL errors, data corruption, and
program termination.

Properties of Direct3D 11 objects may be queried using
flink:clGetMemObjectInfo and flink:clGetImageInfo with _param_name_
`CL_MEM_D3D11_RESOURCE_KHR` and `CL_IMAGE_D3D11_SUBRESOURCE_KHR`.
